import csv
import math
import tkinter as tk
from tkinter import simpledialog, filedialog, messagebox
import matplotlib.pyplot as plt
import os

def read_selected_data(csv_file, selected_rows, selected_columns):
    data = []

    with open(csv_file, 'r') as file:
        reader = csv.DictReader(file)
        for i, row in enumerate(reader):
            if i not in selected_rows:
                row_data = [row[column] for column in selected_columns]
                data.append(row_data)

    return data

def calculate_distance(point1, point2):
    x1, y1 = point1
    x2, y2 = point2
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

def calculate_total_distance(coordinates):
    total_distance = 0
    for i in range(1, len(coordinates)):
        distance = calculate_distance(coordinates[i-1], coordinates[i])
        total_distance += distance
    return total_distance

# Example usage
# Manually input CSV file path
root = tk.Tk()
root.withdraw()
csv_file = filedialog.askopenfilename(title="Select CSV File")

# Extract the title of the CSV file before "__MDLC_resnet50_OSL Red Light Jul28shuffle1_35000"
file_title = os.path.basename(csv_file).split("_MDLC_resnet50_OSL Red Light Jul28shuffle1_35000")[0]

# Replace column names in the header row
header_row_updated = None

with open(csv_file, 'r') as file:
    reader = csv.DictReader(file)
    header_row = reader.fieldnames
    if header_row[4] != "CenterX":
        header_row[4] = "CenterX"  # Replace column 4 with "CenterX"
        header_row[5] = "CenterY"  # Replace column 5 with "CenterY"
        header_row_updated = ','.join(header_row)

# Write the updated header back to the CSV file
if header_row_updated:
    with open(csv_file, 'r+') as file:
        content = file.read()
        file.seek(0)
        file.write(header_row_updated + '\n')  # Write the updated header row
        file.write(content)

# Close the file before extracting selected data
file.close()

selected_rows = [0, 1]  # Replace with the row indices to select (0-based)
selected_columns = ['CenterX', 'CenterY']  # Replace with the column names to select

selected_data = read_selected_data(csv_file, selected_rows, selected_columns)

# Apply conversion factor to coordinates
coordinates = []
excluded_rows = []  # Initialize excluded rows list

for i, (x, y) in enumerate(selected_data):
    if x is not None and y is not None:
        try:
            x = float(x)
            y = float(y)
            coordinates.append((x, y))
        except ValueError:
            excluded_rows.append(i + 1)  # Store excluded row index
    else:
        excluded_rows.append(i + 1)  # Store excluded row index

# Apply outlier filtering
coordinates_filtered = [coordinates[0]]  # Start with the first point

threshold_distance = 70  # Set your desired threshold value

for i in range(1, len(coordinates)):
    prev_x, prev_y = coordinates_filtered[-1]
    x, y = coordinates[i]
    distance = calculate_distance((prev_x, prev_y), (x, y))
    if distance <= threshold_distance:
        coordinates_filtered.append((x, y))

# Manually input conversion factor
conversion_factor_Cm = simpledialog.askfloat("Conversion Factor", "Enter the conversion factor from screen units to centimeters:")

# Apply conversion factor to coordinates
total_distance = calculate_total_distance(coordinates_filtered)
total_distance_inCentimeters = total_distance * conversion_factor_Cm
total_distance_inInches = total_distance_inCentimeters / 2.54

# Manually input the title for the plot
plot_title = simpledialog.askstring("Plot Title", "Enter the Mouse_ID for the plot:")

# Update the plot title with the user's provided answer
updated_plot_title = f"Mouse {plot_title} Pathway Visualization"

# TO PLOT ON GRID
# Read data from the selected data
x_coords = [x for x, y in coordinates_filtered]
y_coords = [y for x, y in coordinates_filtered]

# Plot the line connecting the coordinates
plt.plot(x_coords, y_coords, 'b-')  # 'b-' indicates a blue line

# Add a red circle for the start point
plt.scatter(x_coords[0], y_coords[0], color='red', marker='o', s=100, label='Start')

# Add a dark purple circle for the end point
plt.scatter(x_coords[-1], y_coords[-1], color='purple', marker='o', s=100, label='End')

plt.xlabel('X')
plt.ylabel('Y')
plt.title(updated_plot_title)  # Use the updated title for the plot
plt.xticks([])  # Remove tick labels on the x-axis
plt.yticks([])  # Remove tick labels on the y-axis
plt.legend()
plt.grid(True)
plt.show()

# Ask if the user wants to save the plot as a JPG file
save_plot = messagebox.askyesno("Save Plot", "Do you want to save the plot as a JPG file?")

if save_plot:
    # Manually input the file name for the JPG
    jpg_file_name = filedialog.asksaveasfilename(title="Save Plot as JPG", defaultextension=".jpg", filetypes=[("JPEG Image", "*.jpg")])
    
    if jpg_file_name:
        # Save the plot as a JPG file
        plt.savefig(jpg_file_name, format='jpg')
        print(f"The plot has been saved as '{jpg_file_name}'.")

# Close the plot to free up resources
plt.close()
